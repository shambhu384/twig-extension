{# Dynamic Inheritance #}
{# Twig supports dynamic inheritance by using a variable as the base template: #}
{# Cannot extend from a block. #}
{# If the variable evaluates to a Twig_Template or a Twig_TemplateWrapper instance, Twig will use it as
the parent template: #}
{% extends random_template  %}


{# You can also provide a list of templates that are checked for existence. The first template that exists will be used as a parent: #}
{# {% extends ['layout.html', 'base_layout.html'] %} #}


{# Conditional Inheritance #}
{# As the template name for the parent can be any valid Twig expression, it's possible to make the inheritance mechanism conditional: #}

{# Block names should consist of alphanumeric characters, and underscores. Dashes are not permitted. #}
{% block body %}

    {# When a template uses inheritance and if you want to print a block multiple times, use the block function: #}
    <h1>{{ block('title') }}</h1>

    <p>{{ block("title", "common.html.twig") }} </p>

    {# Use the defined test to check if a block exists in the context of the current template: #}
    {% if block("footer") is defined %}
        This is footer defined in this context
    {% endif %}

    {% if block("footer", "common.html.twig") is defined %}
        footer defined in common template
    {% endif %}

    <div class="bs-component">
        <div class="jumbotron">
            <h1 class="display-3">LMS Analytics</h1>
            <p class="lead">This is a simple hero unit, a simple jumbotron-style component for
            calling extra attention to featured content or information.</p>
            <hr class="my-4">
            <p class="lead">
                <a class="btn btn-primary btn-lg" href="/en/login" role="button">Learn more</a>
            </p>
        </div>
    </div>
    {% block stylesheets %}
        <style>
        .jumbotron {
            background-color: pink;
        }
        </style>
    {% endblock %}

    {% autoescape 'html' %}
        <h2>Everything will be automatically escapeds in this block using the HTML strategy</h2>
    {% endautoescape %}

    <ul>
    {% for i in 0..10 %}
        <li> {{ app.name }} </li>
    {% endfor %}
    </ul>


    {# Parent Blocks #}
    {# It's possible to render the contents of the parent block by using the parent function. This
    gives back the results of the parent block #}
    {% block sidebar %}
        <h3>Table Of Contents</h3>
        ...
    {% endblock %}


    {# Named Block End-Tags #}
    {% block main_sidebar %}
        {#  {{ parent() }} #}
        {% block inner_sidebar %}
            ...
        {% endblock inner_sidebar %}
    {% endblock main_sidebar %}

    {# Block Nesting and Scope #}
    {# Blocks can be nested for more complex layouts. Per default, blocks have access to variables from outer scopes: #}
    {% for item in range(2, 5) %}
        <li>{% block loop_item %}{{ item }}{% endblock %}</li>
    {% endfor %}

    {# Block Shortcuts #}
    {# For blocks with little content, it's possible to use a shortcut syntax. The following constructs do the same thing: #}
    {% block title %}
        <p> {{ app.name |title }} </p>
    {% endblock %}


    {# The flush tag tells Twig to flush the output buffer: #}
    {% flush %}

    {# Use template blocks#}
    {% use "blocks.html.twig" with header as base_sidebar, content as base_content %}

    {# Call block from templates which is used or extended #}
    {{ block('base_sidebar') }}
    {{ block('base_content') }}

    <h1>Members</h1>
    <ul>
        {% for user in users %}
            <li>{{ user.fullname|e }}</li>
        {% endfor %}
    </ul>

    {% for i in 0..10 %}
        * {{ i }}
    {% endfor %}

    {% for letter in 'a'..'z' %}
        * {{ letter }}
    {% endfor %}

    {# Inside of a for loop block you can access some special variables: #}
    {% for letter in 'a'|upper..'z'|upper %}
        * {{ letter }}
        {{ loop.index }}
        {{ loop.index0 }}
        {{ loop.revindex }}
        {{ loop.revindex0 }}
        {{ loop.first }}
        {{ loop.last }}
        {{ loop.length }}
        {{ loop.parent }}
    {% endfor %}

    {# Adding condition in loop #}
    <h2> Users list</h2>
    <ol>
        {% for user in users if user.active %}
            <li>{{ user.fullname }}</li>
        {% endfor %}
    </ol>
    {# Else clause #}
    <ul>
        {% for user in users %}
            <li>{{ user.fullname|e }}</li>
        {% else %}
            <li><em>no user found</em></li>
        {% endfor %}
    </ul>

    {# Iterating over Keys #}
    <h1>Members</h1>
    <ul>
        {% for key in users|keys %}
            <li>{{ key }}</li>
        {% endfor %}
    </ul>

    {# Iterating over Keys and Values #}
    <h1>Members</h1>
    <ul>
        {% for key, user in users %}
            <li>{{ key }}: {{ user.fullname|e }}</li>
        {% endfor %}
    </ul>

    {#  Iterating over a Subset #}

    <h1>Top Ten Members</h1>
    {% if users|length > 9 %}
    <ul>
        {% for user in users|slice(0, 4) %}
            {% if not user.active %}
                <li><strong>Active user {{ user.fullname}}</strong></li>
            {% else %}
                <li>In-Active user {{ user.fullname}}</li>
            {% endif %}
        {% endfor %}
    </ul>
    {% endif %}


    {# Conditional statement #}
    {% if online == false %}
        <p>Our website is in maintenance mode. Please, come back later.</p>
    {% endif %}


    {# Loading forms #}
    {# The easiest and most flexible is importing the whole module into a variable. That way you can
    access the attributes: #}
    {% import 'forms.html.twig' as forms %}
    <dl>
        <dt>Username</dt>
        <dd>{{ forms.input('username') }}</dd>
        <dt>Password</dt>
        <dd>{{ forms.input('password', null, 'password') }}</dd>
    </dl>
    <p><strong>Comment</strong></p>
    <p>{{ forms.textarea('comment') }}</p>

    {# Alternatively you can import names from the template into the current namespace: #}
    {% from 'forms.html.twig' import input as input_field, textarea %}

    <dl>
        <dt>Username</dt>
        <dd>{{ input_field('username') }}</dd>
        <dt>Password</dt>
        <dd>{{ input_field('password', '', 'password') }}</dd>
    </dl>
    <p>{{ textarea('comment') }}</p>



    {# batch

    The batch filter "batches" items by returning a list of lists with the given number of items. A
    second parameter can be provided and used to fill in missing items: #}
    {% set items = ['a', 'b', 'c', 'd', 'e', 'f', 'g'] %}

    <table border="1">
        {% for row in items|batch(3, 'No item') %}
        <tr>
            {% for column in row %}
            <td>{{ column }}</td>
            {% endfor %}
        </tr>
        {% endfor %}
    </table>


    {# first #}
    {{ [1, 2, 3, 4]|first }}

    {{ { a: 1, b: 2, c: 3, d: 4 }|first }}
    {# outputs 1 #}

    {{ '1234'|first }}
    {# outputs 1 #}

    {{ [1, 2, 3, 4]|last }}
    {# outputs 4 #}

    {{ { a: 1, b: 2, c: 3, d: 4 }|last }}
    {# outputs 4 #}

    {{ '1234'|last }}
    {# outputs 4 #}


    <br/>
    {{ 'WELCOME to twig template'|lower }}

    {{ {a: 'scott'}|json_encode(constant('JSON_PRETTY_PRINT')) }}
    <br/>

    {# Merge #}
    {% set values = [1, 2] %}
    {% set values = values|merge(['apple', 'juice', 'orange']) %}

    {{ values|json_encode() }}


    {{ "I like Twig.\nYou will like it too."|nl2br }}

    {{ 200.35|number_format }} <br/>
    {{ 9800.333|number_format(2, '.', ',') }} <br/>
    {{ -9800.333|number_format(2, '.', ',') }} <br/>{# outputs : -9 #}
    {{ (-9800.333)|number_format(2, '.', ',') }} <br/> {# outputs : -9,800.33 #}

    {# replace #}

    {{ "I like %this% and %that%."|replace({'%this%': "foo", '%that%': "bar"}) }}

    {# round #}
    {{ 42.55|round }}
    {# outputs 43 #}

    {{ 42.55|round(1, 'floor') }}
    {# outputs 42.5 #}

    {# Slice #}
    {% for i in [1, 2, 3, 4, 5]|slice(1, 2) %}
    {# will iterate over 2 and 3 #}
    {% endfor %}

    {{ '12345'|slice(1, 2) }}
    {# outputs 23 #}

    {% for i in [1, 2, 3, 4, 5]|slice(start, length) %}
        {# ... #}
    {% endfor %}

    {% for i in [1, 2, 3, 4, 5][start:length] %}
    {# ... #}
    {% endfor %}

    {{ '12345'[1:2] }} {# will display "23" #}

    {# you can omit the first argument -- which is the same as 0 #}
    {{ '12345'[:2] }} {# will display "12" #}

    {# you can omit the last argument -- which will select everything till the end #}
    {{ '12345'[2:] }} {# will display "345" #}


    {# --- SORT --- #}
    {% for user in users|sort %}
        {{ user.fullname }}
    {% endfor %}

    {# -- split -- #}

    {% set foo = "one,two,three"|split(',') %}
    {# foo contains ['one', 'two', 'three'] #}

    {% set foo = "one,two,three,four,five"|split(',', 3) %}
    {# foo contains ['one', 'two', 'three,four,five'] #}

    {% set foo = "123"|split('') %}
    {# foo contains ['1', '2', '3'] #}

    {% set bar = "aabbcc"|split('', 2) %}
    {# bar contains ['aa', 'bb', 'cc'] #}

    {# strin tags #}
    {{ "<p> Twig <strong>engine</strong> </p>"|striptags }}

    {{ "<p> Twig <strong>engine</strong> </p>"|striptags("<p>") }}

    <br/>
    {# title string #}
    {{ 'my first car'|title }}
    <br/>

    {#
    trimÂ¶

    The trim filter strips whitespace (or other characters) from the beginning and end of a string:
    #}
    {{ '  I like Twig.  '|trim }}

    {# outputs 'I like Twig.' #}

    {{ '  I like Twig.'|trim('.') }}

    {# outputs '  I like Twig' #}

    {{ '  I like Twig.  '|trim(side='left') }}

    {# outputs 'I like Twig.  ' #}

    {{ '  I like Twig.  '|trim(' ', 'right') }}

    {# outputs '  I like Twig.' #}


    {# -- attribute -- #}
    {# The attribute function can be used to access a "dynamic" attribute of a variable: #}

    {{ attribute(obj, hello) }}
    {{ attribute(obj, hello, ['world']) }}
    {# In addition, the defined test can check for the existence of a dynamic attribute: #}
    {{ attribute(obj, hello) is defined ? 'Method exists' : 'Method does not exist' }}


    {# Constants #}
    {# constant returns the constant value for a given string:  #}
    {{ some_date|date(constant('DATE_W3C')) }}
    {{ constant('Namespace\\Classname::CONSTANT_NAME') }}

    {# You can read constants from object instances as well: #}
    {{ constant('RSS', date) }}

    {# Use the defined test to check if a constant is defined: #}
    {% if constant('SOME_CONST') is defined %}
        ...
    {% endif %}


    {# cycle #}
    {# The cycle function cycles on an array of values: #}
    {% set start_year = date() | date('Y') %}
    {% set end_year = start_year + 5 %}

    {% for year in start_year..end_year %}
        {{ cycle(['odd', 'even'], loop.index0) }}
    {% endfor %}

    {# The array can contain any number of values: #}
    {% set fruits = ['apple', 'orange', 'citrus'] %}

    {% for i in 0..10 %}
        {{ cycle(fruits, i) }}
    {% endfor %}

    {# Date
       Converts an argument to a date to allow date comparison:
    #}
    {% if date(app.time) < date('-2days') %}
        {# do something #}
    {% endif %}

    {# You can pass a timezone as the second argument: #}
    {% if date(user.created_at) < date('-2days', 'Europe/Paris') %}
        {# do something #}
    {% endif %}

    {# If no argument is passed, the function returns the current date: #}
    {% if date(user.created_at) < date() %}
        {# always! #}
    {% endif %}

    <hr>
    {# Must have loaded twig debug extension #}
    {{ dump(app.name) }}
    <br/>

    {{ max(1, 3, 2) }}
    {{ max([1, 3, 2]) }}

    {{ min(1, 3, 2) }}
    {{ min([1, 3, 2]) }}


    {# defined works with variable names #}
    {% if foo is defined %}
    ...
    {% endif %}

    {# and attributes on variables names #}
    {% if foo.bar is defined %}
    ...
    {% endif %}

    {% if foo['bar'] is defined %}
    ...
    {% endif %}

    {# divisible by #}
    {% if loop.index is divisible by(3) %}
        ...
    {% endif %}


    {# epmty #}
    {% if foo is empty %}
        ...
    {% endif %}


    {# -- iterable -- #}

    {# evaluates to true if the foo variable is iterable #}
    {% if users is iterable %}
        {% for user in users %}
            Hello {{ user }}!
        {% endfor %}
    {% else %}
        {# users is probably a string #}
        Hello {{ users }}!
    {% endif %}

    {# Person #}
{{ app.name }}
{{ app.firstName('male') }}
{{ app.lastName }}

{# Address #}
{{ app.address }}
{{ app.streetName }}
{{ app.streetAddress }}
{{ app.postCode }}
{{ app.address }}
{{ app.country }}

{#  Company #}
{{ app.company }}

{# date and time #}

{{ app.year }}
{{ app.month }}
{{ app.monthName }}
{{ app.timezone }}
{{ app.time }}
{# app.dateTime #}
{{ app.unixTime }}

{# internet #}
{{ app.email }}
{{ app.userName }}
{{ app.password }}

{# payment #}
{{ app.creditCardType }}
{{ app.creditCardNumber }}

{# images #}
{{ app.imageUrl(50, 60) }}


    Hello {{ app.name }}

    Address {{ app.address }}


    Date: {{ app.time|time_diff }}


    {{ "Lorem ipsum dolor sit amet, consectetur adipiscing"|wordwrap(10) }}

{% endblock %}
