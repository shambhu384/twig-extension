{# Dynamic Inheritance #}
{# Twig supports dynamic inheritance by using a variable as the base template: #}
{# Cannot extend from a block. #}
{# If the variable evaluates to a Twig_Template or a Twig_TemplateWrapper instance, Twig will use it as
the parent template: #}
{% extends random_template  %}


{# You can also provide a list of templates that are checked for existence. The first template that exists will be used as a parent: #}
{# {% extends ['layout.html', 'base_layout.html'] %} #}


{# Conditional Inheritance #}
{# As the template name for the parent can be any valid Twig expression, it's possible to make the inheritance mechanism conditional: #}

{# Block names should consist of alphanumeric characters, and underscores. Dashes are not permitted. #}
{% block body %}

    {# When a template uses inheritance and if you want to print a block multiple times, use the block function: #}
    <h1>{{ block('title') }}</h1>

    <p>{{ block("title", "common.html.twig") }} </p>

    {# Use the defined test to check if a block exists in the context of the current template: #}
    {% if block("footer") is defined %}
        This is footer defined in this context
    {% endif %}

    {% if block("footer", "common.html.twig") is defined %}
        footer defined in common template
    {% endif %}

    <div class="bs-component">
        <div class="jumbotron">
            <h1 class="display-3">LMS Analytics</h1>
            <p class="lead">This is a simple hero unit, a simple jumbotron-style component for
            calling extra attention to featured content or information.</p>
            <hr class="my-4">
            <p class="lead">
                <a class="btn btn-primary btn-lg" href="/en/login" role="button">Learn more</a>
            </p>
        </div>
    </div>
    {% block stylesheets %}
        <style>
        .jumbotron {
            background-color: pink;
        }
        </style>
    {% endblock %}

    {% autoescape 'html' %}
        <h2>Everything will be automatically escapeds in this block using the HTML strategy</h2>
    {% endautoescape %}

    <ul>
    {% for i in 0..10 %}
        <li> {{ app.name }} </li>
    {% endfor %}
    </ul>


    {# Parent Blocks #}
    {# It's possible to render the contents of the parent block by using the parent function. This
    gives back the results of the parent block #}
    {% block sidebar %}
        <h3>Table Of Contents</h3>
        ...
    {% endblock %}


    {# Named Block End-Tags #}
    {% block main_sidebar %}
        {#  {{ parent() }} #}
        {% block inner_sidebar %}
            ...
        {% endblock inner_sidebar %}
    {% endblock main_sidebar %}

    {# Block Nesting and Scope #}
    {# Blocks can be nested for more complex layouts. Per default, blocks have access to variables from outer scopes: #}
    {% for item in range(2, 5) %}
        <li>{% block loop_item %}{{ item }}{% endblock %}</li>
    {% endfor %}

    {# Block Shortcuts #}
    {# For blocks with little content, it's possible to use a shortcut syntax. The following constructs do the same thing: #}
    {% block title %}
        <p> {{ app.name |title }} </p>
    {% endblock %}


    {# The flush tag tells Twig to flush the output buffer: #}
    {% flush %}

    {# Use template blocks#}
    {% use "blocks.html.twig" with header as base_sidebar, content as base_content %}

    {# #}
    {% block content %}
    {% endblock %}

    {# Call block from templates which is used or extended #}
    {{ block('base_sidebar') }}
    {{ block('base_content') }}

{# Person #}
{{ app.name }}
{{ app.firstName('male') }}
{{ app.lastName }}

{# Address #}
{{ app.address }}
{{ app.streetName }}
{{ app.streetAddress }}
{{ app.postCode }}
{{ app.address }}
{{ app.country }}

{#  Company #}
{{ app.company }}

{# date and time #}

{{ app.year }}
{{ app.month }}
{{ app.monthName }}
{{ app.timezone }}
{{ app.time }}
{# app.dateTime #}
{{ app.unixTime }}

{# internet #}
{{ app.email }}
{{ app.userName }}
{{ app.password }}

{# payment #}
{{ app.creditCardType }}
{{ app.creditCardNumber }}

{# images #}
{{ app.imageUrl(50, 60) }}


    Hello {{ app.name }}

    Address {{ app.address }}


    Date: {{ app.time|time_diff }}


    {{ "Lorem ipsum dolor sit amet, consectetur adipiscing"|wordwrap(10) }}

{% endblock %}
